# Part of agent.py --> Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup
from google.adk.agents.llm_agent import LlmAgent
from google.adk.agents.sequential_agent import SequentialAgent
from google.adk.tools import google_search
import smtplib
import uuid
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
from dotenv import load_dotenv
import json
from typing import Dict, Any

# Load environment variables from .env file
load_dotenv()

GEMINI_MODEL = "gemini-2.0-flash"

# Gmail configuration
GMAIL_USER = os.getenv("GMAIL_USER")  # tu_email@gmail.com
GMAIL_PASSWORD = os.getenv("GMAIL_APP_PASSWORD")  # App password de Gmail
APPROVER_EMAIL = os.getenv("APPROVER_EMAIL")  # email del aprobador

# --- Custom Tool Functions ---

def send_approval_email(expense_amount: str, expense_category: str, expense_description: str, 
                       expense_date: str, employee_name: str, validation_message: str) -> Dict[str, Any]:
    """
    Env√≠a email de aprobaci√≥n con botones.
    
    Args:
        expense_amount: Monto del gasto
        expense_category: Categor√≠a del gasto
        expense_description: Descripci√≥n del gasto
        expense_date: Fecha del gasto
        employee_name: Nombre del empleado
        validation_message: Mensaje de validaci√≥n de pol√≠ticas
        
    Returns:
        Dict con status, transaction_id y mensaje
    """
    try:
        # Verificar configuraci√≥n de Gmail
        if not GMAIL_USER or not GMAIL_PASSWORD or not APPROVER_EMAIL:
            error_msg = f"‚ùå Configuraci√≥n de Gmail incompleta: USER={bool(GMAIL_USER)}, PASS={bool(GMAIL_PASSWORD)}, APPROVER={bool(APPROVER_EMAIL)}"
            print(error_msg)
            return {
                "status": "error",
                "message": error_msg
            }
        
        print(f"üìß Iniciando env√≠o de email de aprobaci√≥n...")
        print(f"   Monto: ${expense_amount}")
        print(f"   Categor√≠a: {expense_category}")
        print(f"   Empleado: {employee_name}")
        print(f"   Destinatario: {APPROVER_EMAIL}")
        
        # Generar ID √∫nico para la transacci√≥n
        transaction_id = str(uuid.uuid4())
        
        # Construir expense_data desde par√°metros individuales
        expense_data = {
            'amount': expense_amount,
            'category': expense_category,
            'description': expense_description,
            'date': expense_date,
            'employee': employee_name
        }
        
        print(f"üì® Conectando a servidor SMTP de Gmail...")
        
        # Configurar servidor SMTP
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(GMAIL_USER, GMAIL_PASSWORD)
        
        print(f"‚úÖ Conexi√≥n SMTP exitosa, preparando mensaje...")
        
        # Crear mensaje
        msg = MIMEMultipart('alternative')
        msg['From'] = GMAIL_USER
        msg['To'] = APPROVER_EMAIL
        msg['Subject'] = f"Aprobaci√≥n de Gasto - {expense_data.get('category', 'General')}"
        
        # Crear mensaje
        msg = MIMEMultipart('alternative')
        msg['From'] = GMAIL_USER
        msg['To'] = APPROVER_EMAIL
        msg['Subject'] = f"Aprobaci√≥n de Gasto - {expense_data.get('category', 'General')}"
        
        # HTML con botones (usando puerto 8001 para coincidir con webhook_server.py)
        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;">
                    Solicitud de Aprobaci√≥n de Gasto
                </h2>
                
                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h3 style="color: #2980b9; margin-top: 0;">Detalles del Gasto:</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr>
                            <td style="padding: 8px; font-weight: bold;">Monto:</td>
                            <td style="padding: 8px;">${expense_data.get('amount', 'N/A')}</td>
                        </tr>
                        <tr style="background-color: #ecf0f1;">
                            <td style="padding: 8px; font-weight: bold;">Categor√≠a:</td>
                            <td style="padding: 8px;">{expense_data.get('category', 'N/A')}</td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; font-weight: bold;">Descripci√≥n:</td>
                            <td style="padding: 8px;">{expense_data.get('description', 'N/A')}</td>
                        </tr>
                        <tr style="background-color: #ecf0f1;">
                            <td style="padding: 8px; font-weight: bold;">Fecha:</td>
                            <td style="padding: 8px;">{expense_data.get('date', 'N/A')}</td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; font-weight: bold;">Empleado:</td>
                            <td style="padding: 8px;">{expense_data.get('employee', 'N/A')}</td>
                        </tr>
                    </table>
                </div>
                
                <div style="background-color: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107; margin: 20px 0;">
                    <h3 style="color: #856404; margin-top: 0;">Validaci√≥n de Pol√≠ticas:</h3>
                    <p style="margin: 0;">{validation_message}</p>
                </div>
                
                <div style="text-align: center; margin: 30px 0;">
                    <p style="font-size: 16px; margin-bottom: 20px;">
                        <strong>¬øAprueba este gasto?</strong>
                    </p>
                    
                    <a href="http://localhost:8001/approve/{transaction_id}" 
                       style="display: inline-block; background-color: #27ae60; color: white; padding: 12px 30px; 
                              text-decoration: none; border-radius: 5px; margin: 0 10px; font-weight: bold;">
                        ‚úÖ APROBAR
                    </a>
                    
                    <a href="http://localhost:8001/reject/{transaction_id}" 
                       style="display: inline-block; background-color: #e74c3c; color: white; padding: 12px 30px; 
                              text-decoration: none; border-radius: 5px; margin: 0 10px; font-weight: bold;">
                        ‚ùå RECHAZAR
                    </a>
                </div>
                
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #bdc3c7; 
                           font-size: 12px; color: #7f8c8d; text-align: center;">
                    <p>Este email fue generado autom√°ticamente por el sistema de procesamiento de gastos.</p>
                    <p>ID de transacci√≥n: {transaction_id}</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Adjuntar HTML
        msg.attach(MIMEText(html_body, 'html'))
        
        # Enviar email
        print(f"üì§ Enviando email...")
        server.sendmail(GMAIL_USER, APPROVER_EMAIL, msg.as_string())
        server.quit()
        
        print(f"‚úÖ Email de aprobaci√≥n enviado exitosamente!")
        print(f"   Transaction ID: {transaction_id[:8]}...")
        print(f"   Approve URL: http://localhost:8001/approve/{transaction_id}")
        print(f"   Reject URL: http://localhost:8001/reject/{transaction_id}")
        
        return {
            "status": "success",
            "transaction_id": transaction_id,
            "message": "Email de aprobaci√≥n enviado exitosamente",
            "approve_url": f"http://localhost:8001/approve/{transaction_id}",
            "reject_url": f"http://localhost:8001/reject/{transaction_id}"
        }
        
    except smtplib.SMTPAuthenticationError as e:
        error_msg = f"‚ùå Error de autenticaci√≥n SMTP: {str(e)} - Verifica GMAIL_USER y GMAIL_APP_PASSWORD"
        print(error_msg)
        return {
            "status": "error",
            "message": error_msg
        }
    except smtplib.SMTPException as e:
        error_msg = f"‚ùå Error SMTP: {str(e)}"
        print(error_msg)
        return {
            "status": "error",
            "message": error_msg
        }
    except Exception as e:
        error_msg = f"‚ùå Error general enviando email: {str(e)}"
        print(error_msg)
        return {
            "status": "error",
            "message": error_msg
        }

def process_approval_response(transaction_id, decision, comments=""):
    """Procesa la respuesta de aprobaci√≥n del webhook"""
    try:
        # Aqu√≠ podr√≠as guardar en base de datos, etc.
        result = {
            "transaction_id": transaction_id,
            "decision": decision,
            "comments": comments,
            "timestamp": "2024-01-01T00:00:00Z"  # En producci√≥n usar datetime.now()
        }
        
        # Enviar email de confirmaci√≥n
        send_confirmation_email(result)
        
        return result
    except Exception as e:
        return {"error": f"Error procesando respuesta: {str(e)}"}

def send_confirmation_email(approval_result):
    """Env√≠a email de confirmaci√≥n al empleado"""
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(GMAIL_USER, GMAIL_PASSWORD)
        
        decision = approval_result['decision']
        status_color = "#27ae60" if decision == "approved" else "#e74c3c"
        status_text = "APROBADO" if decision == "approved" else "RECHAZADO"
        status_icon = "‚úÖ" if decision == "approved" else "‚ùå"
        
        msg = MIMEMultipart()
        msg['From'] = GMAIL_USER
        msg['To'] = GMAIL_USER  # En producci√≥n, usar email del empleado
        msg['Subject'] = f"Gasto {status_text} - ID: {approval_result['transaction_id'][:8]}"
        
        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="text-align: center; padding: 20px; background-color: {status_color}; 
                           color: white; border-radius: 8px; margin-bottom: 20px;">
                    <h1 style="margin: 0; font-size: 24px;">
                        {status_icon} Gasto {status_text}
                    </h1>
                </div>
                
                <p>Su solicitud de gasto ha sido <strong>{status_text.lower()}</strong>.</p>
                
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p><strong>ID de transacci√≥n:</strong> {approval_result['transaction_id']}</p>
                    <p><strong>Fecha de decisi√≥n:</strong> {approval_result['timestamp']}</p>
                    {f"<p><strong>Comentarios:</strong> {approval_result.get('comments', 'Sin comentarios')}</p>" if approval_result.get('comments') else ""}
                </div>
                
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #bdc3c7; 
                           font-size: 12px; color: #7f8c8d; text-align: center;">
                    <p>Sistema automatizado de procesamiento de gastos</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(html_body, 'html'))
        server.sendmail(GMAIL_USER, GMAIL_USER, msg.as_string())
        server.quit()
        
        return {"status": "success", "message": "Email de confirmaci√≥n enviado"}
        
    except Exception as e:
        return {"status": "error", "message": f"Error enviando confirmaci√≥n: {str(e)}"}

# --- 1. Define Sub-Agents for Expense Processing Pipeline ---

# Receipt Digitizer Agent
receipt_digitizer_agent = LlmAgent(
    name="ReceiptDigitizerAgent",
    model=GEMINI_MODEL,
    tools=[google_search],
    instruction="""Eres un agente que digitaliza y extrae informaci√≥n de recibos de gastos.
    
    Analiza la informaci√≥n del gasto proporcionada y extrae:
    - Monto total
    - Fecha del gasto
    - Categor√≠a (comida, transporte, materiales, etc.)
    - Descripci√≥n detallada
    - Comercio/proveedor
    - Empleado que realiz√≥ el gasto
    
    Devuelve la informaci√≥n en formato JSON estructurado:
    {
        "amount": "cantidad_numerica",
        "date": "YYYY-MM-DD",
        "category": "categoria",
        "description": "descripcion_detallada",
        "merchant": "nombre_comercio",
        "employee": "nombre_empleado"
    }
    
    Si falta informaci√≥n, usa valores por defecto razonables o marca como "N/A".
    """,
    description="Digitaliza recibos y extrae informaci√≥n estructurada",
    output_key="digitized_receipt"
)

# Expense Categorizer Agent
expense_categorizer_agent = LlmAgent(
    name="ExpenseCategorizerAgent",
    model=GEMINI_MODEL,
    instruction="""Eres un experto en categorizaci√≥n de gastos empresariales.
    
    **Recibo digitalizado:**
    {digitized_receipt}
    
    Tu tarea es:
    1. Validar y mejorar la categorizaci√≥n del gasto
    2. Asignar subcategor√≠a espec√≠fica
    3. Determinar si es un gasto deducible de impuestos
    4. Calcular el monto final con impuestos si aplica
    
    Categor√≠as principales disponibles:
    - Alimentaci√≥n (comidas de negocio, catering)
    - Transporte (combustible, taxi, vuelos, hotel)
    - Materiales de oficina (papeler√≠a, equipos)
    - Tecnolog√≠a (software, hardware)
    - Marketing (publicidad, eventos)
    - Servicios profesionales (consultor√≠a, legal)
    - Otros gastos operativos
    
    Devuelve en formato JSON:
    {
        "original_data": "copia_del_recibo_original",
        "category": "categoria_principal",
        "subcategory": "subcategoria_especifica",
        "tax_deductible": true/false,
        "final_amount": "monto_final_con_impuestos",
        "categorization_notes": "notas_adicionales"
    }
    """,
    description="Categoriza gastos seg√∫n pol√≠ticas empresariales",
    output_key="categorized_expense"
)

# Policy Validator Agent
policy_validator_agent = LlmAgent(
    name="PolicyValidatorAgent", 
    model=GEMINI_MODEL,
    instruction="""Eres un validador de pol√≠ticas de gastos empresariales.
    
    **Gasto categorizado:**
    {categorized_expense}
    
    Pol√≠ticas de la empresa a validar:
    1. Gastos de alimentaci√≥n: m√°ximo $50 por d√≠a por empleado
    2. Transporte: requiere justificaci√≥n de negocio para montos >$100
    3. Materiales de oficina: m√°ximo $200 por mes por empleado
    4. Tecnolog√≠a: requiere aprobaci√≥n previa para montos >$500
    5. Todos los gastos requieren recibo v√°lido
    6. Gastos de entretenimiento limitados a $100 por evento
    
    Valida el gasto contra estas pol√≠ticas y determina:
    - Si cumple con las pol√≠ticas (APPROVED/NEEDS_APPROVAL/REJECTED)
    - Razones espec√≠ficas si no cumple
    - Monto aprobado (puede ser menor al solicitado)
    - Documentaci√≥n adicional requerida
    
    Devuelve en formato JSON:
    {
        "validation_status": "APPROVED/NEEDS_APPROVAL/REJECTED",
        "approved_amount": "monto_aprobado",
        "policy_violations": ["lista_de_violaciones"],
        "required_documentation": ["documentos_adicionales_necesarios"],
        "validation_notes": "notas_del_validador",
        "requires_manager_approval": true/false
    }
    """,
    description="Valida gastos contra pol√≠ticas empresariales",
    output_key="validation_result"
)

# Approval Email Sender Agent
approval_email_sender_agent = LlmAgent(
    name="ApprovalEmailSenderAgent",
    model=GEMINI_MODEL,
    tools=[send_approval_email],
    instruction="""Eres un agente que gestiona el env√≠o de emails de aprobaci√≥n.
    
    **Gasto categorizado:**
    {categorized_expense}
    
    **Resultado de validaci√≥n:**
    {validation_result}
    
    IMPORTANTE: Debes SIEMPRE llamar a la funci√≥n send_approval_email cuando el gasto necesite aprobaci√≥n.
    
    Tu tarea es:
    1. Analizar si el gasto necesita aprobaci√≥n manual
    2. Extraer los datos del gasto categorizado para el email
    3. OBLIGATORIO: Llamar a send_approval_email si se necesita aprobaci√≥n
    4. Reportar el resultado
    
    REGLAS:
    - Si validation_status es "NEEDS_APPROVAL" o requires_manager_approval es true ‚Üí DEBES llamar send_approval_email
    - Si validation_status es "APPROVED" ‚Üí no env√≠es email, contin√∫a al siguiente paso
    - Si validation_status es "REJECTED" ‚Üí no env√≠es email, marca como rechazado
    
    EJEMPLO DE USO DE LA FUNCI√ìN:
    Para gastos que necesitan aprobaci√≥n, debes llamar:
    send_approval_email(
        expense_amount="501",
        expense_category="Tecnolog√≠a", 
        expense_description="Teclado ergon√≥mico por indicaciones m√©dicas",
        expense_date="2025-04-13",
        employee_name="Usuario",
        validation_message="Gasto de tecnolog√≠a mayor a $500, requiere aprobaci√≥n gerencial"
    )
    
    Despu√©s de llamar la funci√≥n (o decidir no llamarla), devuelve el resultado en formato JSON:
    {
        "email_sent": true/false,
        "transaction_id": "id_de_la_funcion_si_se_envio",
        "email_status": "sent/not_needed/error",
        "next_action": "wait_approval/proceed_to_payment/reject",
        "message": "descripcion_de_la_accion",
        "function_result": "resultado_de_send_approval_email_si_se_llamo"
    }
    """,
    description="Env√≠a emails de aprobaci√≥n a los gerentes",
    output_key="email_result"
)

# Approval Router Agent  
approval_router_agent = LlmAgent(
    name="ApprovalRouterAgent",
    model=GEMINI_MODEL,
    instruction="""Eres un agente que gestiona el enrutamiento de aprobaciones.
    
    **Resultado del email:**
    {email_result}
    
    **Resultado de validaci√≥n:**
    {validation_result}
    
    Tu tarea es determinar el siguiente paso basado en:
    1. Si se envi√≥ email de aprobaci√≥n
    2. El estado de validaci√≥n de pol√≠ticas
    3. Si se requiere aprobaci√≥n manual
    
    IMPORTANTE: NO llames a ninguna funci√≥n externa. Solo analiza y decide el routing.
    
    L√≥gica de routing:
    - Si email_result.email_sent es true ‚Üí "wait_for_approval" (espera respuesta del gerente)
    - Si validation_result.validation_status es "APPROVED" ‚Üí "proceed_to_payment"
    - Si validation_result.validation_status es "REJECTED" ‚Üí "rejected"
    - Si validation_result.requires_manager_approval es false y validation_status es "APPROVED" ‚Üí "proceed_to_payment"
    
    Devuelve en formato JSON:
    {
        "routing_decision": "wait_for_approval/proceed_to_payment/rejected/requires_documentation",
        "status": "approved/pending/rejected/needs_docs",
        "approved_amount": "monto_final_aprobado",
        "transaction_id": "id_de_transaccion_si_existe",
        "next_steps": ["lista_de_pasos_siguientes"],
        "routing_notes": "explicacion_de_la_decision_tomada",
        "requires_human_action": true/false
    }
    """,
    description="Enruta gastos seg√∫n necesidades de aprobaci√≥n",
    output_key="routing_result"
)

# Payment Processor Agent
payment_processor_agent = LlmAgent(
    name="PaymentProcessorAgent",
    model=GEMINI_MODEL,
    instruction="""Eres el agente final que procesa los pagos aprobados.
    
    **Resultado de enrutamiento:**
    {routing_result}
    
    **Gasto original:**
    {categorized_expense}
    
    **Email result:**
    {email_result}
    
    IMPORTANTE: Solo procesa pagos para gastos completamente aprobados.
    
    L√≥gica de procesamiento:
    - Si routing_decision es "proceed_to_payment" ‚Üí procesar pago inmediatamente
    - Si routing_decision es "wait_for_approval" ‚Üí marcar como pendiente de aprobaci√≥n
    - Si routing_decision es "rejected" ‚Üí marcar como rechazado
    - Si routing_decision es "requires_documentation" ‚Üí marcar como necesita documentos
    
    Para gastos que proceden al pago:
    1. Genera un n√∫mero de referencia de pago
    2. Prepara la informaci√≥n para el sistema de pagos
    3. Registra el gasto en contabilidad
    4. Marca como procesado
    
    Para gastos pendientes de aprobaci√≥n:
    1. Marca como pendiente
    2. Proporciona informaci√≥n de seguimiento
    3. Incluye URLs de aprobaci√≥n si existen
    
    Devuelve en formato JSON:
    {
        "payment_processed": true/false,
        "payment_reference": "numero_de_referencia_o_null",
        "processed_amount": "monto_procesado_o_pendiente",
        "processing_date": "fecha_procesamiento_o_null",
        "accounting_entry": "numero_de_asiento_contable_o_null",
        "final_status": "paid/pending_approval/rejected/needs_docs",
        "transaction_id": "id_de_transaccion_si_existe",
        "approval_urls": {
            "approve": "url_de_aprobacion_o_null",
            "reject": "url_de_rechazo_o_null"
        },
        "processing_notes": "descripcion_detallada_del_estado",
        "next_action_required": "accion_que_debe_tomar_el_usuario_o_sistema"
    }
    """,
    description="Procesa pagos de gastos aprobados o gestiona estados pendientes",
    output_key="payment_result"
)

# --- 2. Create the SequentialAgent ---
expense_processing_pipeline = SequentialAgent(
    name="ExpenseProcessingPipeline",
    sub_agents=[
        receipt_digitizer_agent,
        expense_categorizer_agent, 
        policy_validator_agent,
        approval_email_sender_agent,
        approval_router_agent,
        payment_processor_agent
    ],
    description="Pipeline completo para procesamiento de gastos con aprobaci√≥n por email",
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = expense_processing_pipeline

# --- Funciones adicionales para integraci√≥n con webhook ---

def handle_webhook_approval(transaction_id: str, decision: str, comments: str = "") -> Dict[str, Any]:
    """
    Maneja las respuestas de aprobaci√≥n que vienen del webhook.
    Esta funci√≥n se puede llamar cuando el webhook recibe una respuesta.
    
    Args:
        transaction_id: ID de la transacci√≥n
        decision: "approved" o "rejected"
        comments: Comentarios opcionales del aprobador
        
    Returns:
        Dict con el resultado del procesamiento
    """
    try:
        print(f"üîÑ Procesando respuesta de webhook: {decision} para {transaction_id[:8]}")
        
        if decision == "approved":
            # Aqu√≠ podr√≠as continuar el pipeline desde el punto de pago
            # O actualizar una base de datos, etc.
            result = {
                "status": "approved",
                "transaction_id": transaction_id,
                "decision": decision,
                "comments": comments,
                "next_action": "process_payment",
                "message": "Gasto aprobado, procediendo al pago"
            }
        elif decision == "rejected":
            result = {
                "status": "rejected", 
                "transaction_id": transaction_id,
                "decision": decision,
                "comments": comments,
                "next_action": "notify_employee",
                "message": "Gasto rechazado, notificando al empleado"
            }
        else:
            result = {
                "status": "error",
                "message": f"Decisi√≥n inv√°lida: {decision}"
            }
            
        # Enviar email de confirmaci√≥n
        send_confirmation_email(result)
        
        return result
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"Error procesando respuesta de webhook: {str(e)}"
        }

def get_expense_status(transaction_id: str) -> Dict[str, Any]:
    """
    Consulta el estado de un gasto por su transaction_id.
    √ötil para integrar con sistemas externos.
    """
    # En una implementaci√≥n real, consultar√≠as una base de datos
    # Por ahora, devolvemos un placeholder
    return {
        "transaction_id": transaction_id,
        "status": "pending_approval",
        "message": "Esta funci√≥n requiere integraci√≥n con base de datos"
    }